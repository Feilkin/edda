# lexical

Number        = [0-9]+(\.[0-9]+)?
LeftParen     = (
RightParen    = )
LeftBrace     = {
RightBrace    = }
Comma         = ,
Dot           = .
DotDot        = ..
Semicolon     = ;
Plus          = +
Minus         = -
Star          = *
Slash         = /
LineComment   = // .* \n
Caret         = ^
Bang          = !
BangEqual     = !=
Equal         = =
EqualEqual    = ==
LessEqual     = <=
GreaterEqual  = >=
Less          = <
Greater       = >
Arrow         = ->
FatArrow      = =>
Identifier    = [a-zA-Z_]+[a-zA-Z0-9_]*
Let           = "let"
And           = "and"
Or            = "or"
For           = "for"
In            = "in"
While         = "while"
Print         = "print"
Export        = "export"
True          = "true"
False         = "false"
Nil           = "nil"
Global        = "global"

# syntax

script          = declaration* exportStatement? EoF ;
declaration     = varDeclaration
                | globDeclaration
                | statement ;
varDeclaration  = Let Identifier (Equal expression)? Semicolon ;
globDeclaration = Let Global Identifier Equal expression Semicolon ;
statement       = exprStatement
                | printStatement ;
exprStatement   = expression Semicolon ;
printStatement  = Print expression Semicolon ;
exportStatement = Export expression (Comma expression)* Semicolon ;
expression      = equality ;
equality        = comparison ( ( BangEquality | EqualityEquality ) comparison )* ;
comparsion      = addition ( ( Less | LessEqual | Greater | GreaterEqual ) addition )* ;
addition        = multiplication ( ( Minus | Plus ) multiplication )* ;
multiplication  = unary ( ( Slash | Star ) unary )* ;
unary           = ( Bang | Minus ) unary
                | primary ;
primary         = Number
                | String
                | True
                | False
                | Nil
                | LeftParen expression RightParen
                | Identifier
                | Global Identifier
                | funcExpression ;
paramList       = LeftParen (Identifier (Comma Identifier)* )? RightParen ;
funcExpression  = paramList? Arrow blockExpression ;
blockExpression = LeftBrace declaration* expression? RightBrace ;